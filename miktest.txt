using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Collections;

namespace Sudoku
{
    class solve
    {
        //public static Random randGen = new Random();
        //public static int RandInt(int fr, int to)
        //{
        //    return fr + (randGen.Next() % (to - fr + 1));
        //}
        public int[,] genSolve()
        {
            Random ran = new Random();
            int[,] table = new int[4, 4];
            table = getSolve();
            List<int> pp = new List<int>();
            pp.Add(1);
            pp.Add(2);
            pp.Add(3);
            pp.Add(4);

            List<int> rr = new List<int>();
            //rr = pp;
            rr = new List<int>();
            rr.Add(1);
            rr.Add(2);
            rr.Add(3);
            rr.Add(4);

            //input indext 00
            //int index = RandInt(1, 4);
            int index = ran.Next(4); 
            if (index == 0)
            {
                table[0, 0] = rr[0];
            }
            else if (index == 1)
            {
                table[0, 0] = rr[1];
            }
            else if (index == 2)
            {
                table[0, 0] = rr[2];
            }
            else
            {
                table[0, 0] = rr[3];
            }
            rr.RemoveAt(rr.IndexOf(table[0, 0]));

            //input indext 01
            //index = RandInt(1, 3);
            index = ran.Next(3); 
            if (index == 0)
            {
                table[0, 1] = rr[0];
            }
            else if (index == 1)
            {
                table[0, 1] = rr[1];
            }
            else
            {
                table[0, 1] = rr[2];
            }
            rr.RemoveAt(rr.IndexOf(table[0, 1]));

            //input indext 02
            //index = RandInt(1, 2);
            index = ran.Next(2);
            if (index == 0)
            {
                table[0, 2] = rr[0];
            }
            else
            {
                table[0, 2] = rr[1];
            }
            rr.RemoveAt(rr.IndexOf(table[0, 2]));

            //input indext 03
            table[0, 3] = rr[0];

            //input indext 10
            //rr = pp;
            rr = new List<int>();
            rr.Add(1);
            rr.Add(2);
            rr.Add(3);
            rr.Add(4);

            rr.RemoveAt(rr.IndexOf(table[0, 0]));
            rr.RemoveAt(rr.IndexOf(table[0, 1]));
            //index = RandInt(1, 2);
            index = ran.Next(2);
            if (index == 0)
            {
                table[1, 0] = rr[0];
            }
            else
            {
                table[1, 0] = rr[1];
            }
            rr.RemoveAt(rr.IndexOf(table[1, 0]));

            //input indext 11
            table[1, 1] = rr[0];

            //input indext 12
            rr = pp;
            rr.RemoveAt(rr.IndexOf(table[0, 2]));
            rr.RemoveAt(rr.IndexOf(table[0, 3]));
            //index = RandInt(1, 2);
            index = ran.Next(2);
            if (index == 0)
            {
                table[1, 2] = rr[0];
            }
            else
            {
                table[1, 2] = rr[1];
            }
            rr.RemoveAt(rr.IndexOf(table[1, 2]));

            //input indext 13
            table[1, 3] = rr[0];

            //input indext 20
            //rr = pp;
            rr = new List<int>();
            rr.Add(1);
            rr.Add(2);
            rr.Add(3);
            rr.Add(4);

            rr.RemoveAt(rr.IndexOf(table[0, 0]));
            rr.RemoveAt(rr.IndexOf(table[1, 0]));
            //index = RandInt(1, 2);
            index = ran.Next(2);
            if (index == 0)
            {
                table[2, 0] = rr[0];
            }
            else
            {
                table[2, 0] = rr[1];
            }

            //input indext 21
            //rr = pp;
            rr = new List<int>();
            rr.Add(1);
            rr.Add(2);
            rr.Add(3);
            rr.Add(4);

            rr.RemoveAt(rr.IndexOf(table[0, 1]));
            rr.RemoveAt(rr.IndexOf(table[1, 1]));
            //index = RandInt(1, 2);
            index = ran.Next(2);
            if (index == 0)
            {
                table[2, 1] = rr[0];
            }
            else
            {
                table[2, 1] = rr[1];
            }

            //input indext 22
            //rr = pp;
            rr = new List<int>();
            rr.Add(1);
            rr.Add(2);
            rr.Add(3);
            rr.Add(4);

            rr.RemoveAt(rr.IndexOf(table[0, 2]));
            rr.RemoveAt(rr.IndexOf(table[1, 2]));
            //index = RandInt(1, 2);
            index = ran.Next(2);
            if (index == 0)
            {
                table[2, 2] = rr[0];
            }
            else
            {
                table[2, 2] = rr[1];
            }

            //input indext 23
            rr = pp;
            rr.RemoveAt(rr.IndexOf(table[2, 0]));
            rr.RemoveAt(rr.IndexOf(table[2, 1]));
            rr.RemoveAt(rr.IndexOf(table[2, 2]));
            table[2, 3] = rr[0];

            //input indext 30
            rr = pp;
            rr.RemoveAt(rr.IndexOf(table[0, 0]));
            rr.RemoveAt(rr.IndexOf(table[1, 0]));
            rr.RemoveAt(rr.IndexOf(table[2, 0]));
            table[3, 0] = rr[0];

            //input indext 31
            rr = pp;
            rr.RemoveAt(rr.IndexOf(table[0, 1]));
            rr.RemoveAt(rr.IndexOf(table[1, 1]));
            rr.RemoveAt(rr.IndexOf(table[2, 1]));
            table[3, 1] = rr[0];

            //input indext 32
            rr = pp;
            rr.RemoveAt(rr.IndexOf(table[0, 2]));
            rr.RemoveAt(rr.IndexOf(table[1, 2]));
            rr.RemoveAt(rr.IndexOf(table[2, 2]));
            table[3, 2] = rr[0];

            //input indext 33
            rr = pp;
            rr.RemoveAt(rr.IndexOf(table[0, 3]));
            rr.RemoveAt(rr.IndexOf(table[1, 3]));
            rr.RemoveAt(rr.IndexOf(table[2, 3]));
            table[3, 3] = rr[0];
            return table;
        }

        public int[ , ] getSolve() 
        {         
            int [ , ] table = new int[4,4];

            table[0, 0] = 1;
            table[0, 1] = 2;
            table[0, 2] = 3;
            table[0, 3] = 4;

            table[1, 0] = 3;
            table[1, 1] = 4;
            table[1, 2] = 1;
            table[1, 3] = 2;

            table[2, 0] = 4;
            table[2, 1] = 1;
            table[2, 2] = 2;
            table[2, 3] = 3;

            table[3, 0] = 2;
            table[3, 1] = 3;
            table[3, 2] = 4;
            table[3, 3] = 1;

            return table;
        }
    }
}